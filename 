#!/usr/bin/env python

import sys,os
from optparse import OptionParser

sensors = []
countOK = 0
countWarning = 0
countError = 0
countUnknown = 0

# clean up the arrray
def cleanArray(lines):
    lines = lines[3:]
    while (lines[-1] == []):
            lines.pop()
    return lines

def parseDegrees(line):
    if (line[2] == "-"):
        line[2] = 0;
        line[3] = 0;
    else:
        line[2] = int(line[2].split('/')[0].strip('C'))
        line[3] = int(line[3].split('/')[0].strip('C'))
    return line

def compareSensor(line):
       global countUnknown,countOK,countError
       sensorNum = line[0]	
       sensorName = line[1]
       current = line[2]
       threshold = line[3]
       if(current == 0):
               line = 'Sensor ' + str(sensorName) + " " + \
	 	   str(sensorNum) + ' reports no temperature value'
               countUnknown += 1
       elif(current >= threshold):      
               line = "Hot! Sensor " + str(sensorName) + " " + \
		  str(sensorNum) + ' current temperature is ' + \
		  str(current) + 'C which exceeds threshold ' + \
		  str(threshold) + 'C' 
               countError += 1
       else:
               line = 'OK: Sensor ' + str(sensorName) + ' ' + str(sensorNum) + \
		 ' current temperature is ' + str(current) + 'C which' + \
                 ' is below threshold ' + str(threshold) + 'C'
               countOK += 1
       return line

def nagiosExitCode(messages):
        if(countError > 0):
               print("%d sensors exceed thresholds. Too Hot!" % countError)
               exitCode = 2
        else:
                print("%d sensors beneath thresholds. Nice and Cool!" % countOK)
                exitCode = 0
	for line in messages:
		print(line)
	sys.exit(exitCode)

usage = "usage: %prog [Options]"
parser = OptionParser(usage)
parser.add_option("-i", "--input-file", dest="infile",
                help="input file containing system temperatures")
(options, args) = parser.parse_args()

if (options.infile):
        infile = options.infile
        infile = open(options.infile)
else:
	if(os.path.exists('/sbin/hpasmcliz')):
	        stdin,stdout,stderr = os.popen3('/sbin/hpasmcli -s "show temp;"')
        	infile = stdout
	else:
		raise Exception("Can't find hpasmcli binary. Exiting")
	


for line in infile.readlines() :
    sensors.append(line.split())
sensors = cleanArray(sensors)
sensors = map(parseDegrees, sensors)
messages = map(compareSensor, sensors)

nagiosExitCode(messages)


